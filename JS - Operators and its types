JavaScript operators are symbols or keywords used to perform operations on operands, which can be values or variables. 

TYPES OF OPERATORS:-
 1. Arithmetic Operations:

Use Case: Calculating numerical values or manipulating numbers in various ways.
Why: Essential for performing mathematical calculations in programs, which is a fundamental aspect of many applications.
Example: Calculating prices, quantities, dimensions, etc., in an e-commerce website.
Arithmetic operators are used to perform mathematical operations on numbers.

Addition (+): Adds two numbers.
let a = 5;
let b = 3;
let sum = a + b; // sum will be 8

Subtraction (-): Subtracts the second number from the first.
let x = 10;
let y = 7;
let difference = x - y; // difference will be 3

Multiplication (*): Multiplies two numbers.
let p = 6;
let q = 4;
let product = p * q; // product will be 24

Division (/): Divides the first number by the second.



2. Assignment Operations:

Use Case: Storing values in variables for later use.
Why: Variables allow you to store and manipulate data dynamically, which is crucial for creating dynamic and interactive web applications.
Example: Storing user inputs, computed results, or state in a web application.

Assignment operators are used to assign values to variables.
Assignment (=): Assigns the value on the right to the variable on the left.
let x = 10;

*Compound Assignment Operators (e.g., +=, -=, =, /=): Combine an arithmetic operation with assignment.
let a = 5;
a += 3; // Equivalent to a = a + 3, so a will be 8



3.Comparison Operations:

Use Case: Evaluating conditions and making decisions based on the outcome.
Why: Used in conditional statements (e.g., if-else) to control the flow of a program based on different scenarios.
Example: Validating user input, checking user authentication, and performing conditional rendering of UI components.

Comparison operators are used to compare two values or expressions.

Equal to (==):
The == operator checks if two values are equal. It performs type coercion,
which means it tries to convert the values to the same type before comparison.
In this example, even though x is a number and y is a string,
the == operator performs type coercion and checks if their values are equal, which they are.

Equal Value and Equal Type (===): Checks if two values are equal and of the same type.
5 === '5'; // false

Not Equal to (!=): Checks if two values are not equal, performing type coercion if needed.
10 != '10'; // false

Not Equal Value or Not Equal Type (!==): Checks if two values are not equal and not of the same type.
10 !== '10'; // true

Greater Than (>): Checks if the left operand is greater than the right operand.
7 > 5; // true

Less Than (<): Checks if the left operand is less than the right operand.
3 < 8; // true

Greater Than or Equal To (>=): Checks if the left operand is greater than or equal to the right operand.
10 >= 10; // true

Less Than or Equal To (<=): Checks if the left operand is less than or equal to the right operand.
5 <= 7; // true



 4. Logical Operations:

Use Case: Combining and evaluating boolean values to make decisions.
Why: Helps in creating complex decision-making structures and handling multiple conditions.
Example: Controlling access to certain features based on user permissions, 
handling form validation, and implementing complex conditional logic.

Logical OR (||):
let hasCoffee = false;
let hasTea = true;
// Check if the person has at least one of the beverages
if (hasCoffee || hasTea) {
    console.log("You have a beverage to enjoy.");
} else {
    console.log("You don't have any beverages.");
}
In this example, the logical OR (||) operator is used to combine two conditions. 
The if statement checks if at least one of the conditions is true.
If either hasCoffee or hasTea is true, it prints a message indicating that the person has a beverage to enjoy.


Logical AND (&&):
let isSunny = true;
let isWarm = true;
// Check if it's a good day for a picnic
if (isSunny && isWarm) {
    console.log("It's a good day for a picnic!");
} else {
    console.log("It's not the best day for a picnic.");
}
In this example, the logical AND (&&) operator is used to combine two conditions.
The if statement checks if both conditions are true. If isSunny and isWarm are both true,
it prints a message indicating that it's a good day for a picnic.


Logical NOT (!):
let isRaining = true;
// Check if it's not raining
if (!isRaining) {
    console.log("It's not raining, you can go outside.");
} else {
    console.log("It's raining, better stay indoors.");
}
In this example, the logical NOT (!) operator is used to negate the value of isRaining.
The if statement checks if isRaining is false. If it's not raining (!isRaining is true), 
it prints a message indicating that you can go outside.


 5. String Operators:

There's only one string operator in JavaScript, which is concatenation.
Concatenation (+): Joins two or more strings together.

let firstName = 'John';
let lastName = 'Doe';
let fullName = firstName + ' ' + lastName; // fullName will be 'John Doe'


 6. Unary Operators:

Unary operators act on a single operand.
typeof: Returns the data type of an expression.
let x = 5;
let typeOfX = typeof x; // typeOfX will be "number"


7. Ternary Operator (Conditional Operator):

The ternary operator is used to evaluate a condition and return a value based on that condition.
Conditional (ternary) Operator (?):
let age = 20;
let status = (age >= 18) ? "Adult" : "Minor"; // status will be "Adult"




